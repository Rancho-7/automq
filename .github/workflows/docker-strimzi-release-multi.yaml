name: Docker Strimzi Multi-Arch Release

on:
  workflow_dispatch:
    # inputs:
    #   tag:
    #     description: 'AutoMQ version tag'
    #     required: true
    #     type: string
  # workflow_run:
  #   workflows: ["GitHub Release"]
  #   types:
  #     - completed

env:
  KAFKA_VERSION: "3.9.0"
  STRIMZI_REPO: "https://github.com/AutoMQ/strimzi-kafka-operator.git"
  STRIMZI_BRANCH: "main"

jobs:
  prepare-release-info:
    name: Prepare Release Information
    runs-on: ubuntu-24.04
    # 只有当GitHub Release workflow成功完成时才执行，或者手动触发时执行，或者push到dev分支时执行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'}}
    outputs:
      automq_version: ${{ steps.get-version.outputs.automq_version }}
      automq_url: ${{ steps.get-version.outputs.automq_url }}
      original_kafka_url: ${{ steps.get-version.outputs.original_kafka_url }}
    steps:
      - name: Get and validate release information
        id: get-version
        run: |
          TAG="${{ github.event.workflow_run.head_branch }}"
          echo "Using tag from workflow_run: ${TAG}"

          # 构建URL
          AUTOMQ_URL="https://github.com/Rancho-7/automq/releases/download/${TAG}/automq-${TAG}_kafka-${KAFKA_VERSION}.tgz"

          ORIGINAL_KAFKA_URL="https://archive\.apache\.org/dist/kafka/${KAFKA_VERSION}/kafka_2\.13-${KAFKA_VERSION}\.tgz"

          # 设置输出
          echo "automq_version=${TAG}" >> $GITHUB_OUTPUT
          echo "automq_url=${AUTOMQ_URL}" >> $GITHUB_OUTPUT
          echo "original_kafka_url=${ORIGINAL_KAFKA_URL}" >> $GITHUB_OUTPUT

  strimzi-multiarch:
    name: Build Strimzi Image (${{ matrix.arch }})
    needs: prepare-release-info
    strategy:
      matrix:
        include:
          - platform: ubuntu-24.04
            arch: amd64
            docker_platform: linux/amd64
            jdk: "17"
          - platform: ubuntu-24.04
            arch: arm64
            docker_platform: linux/arm64
            jdk: "17"
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: "zulu"

      - name: Set up QEMU (for ARM64)
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone Strimzi Repository
        run: |
          git clone --depth 1 --branch "${{ env.STRIMZI_BRANCH }}" "${{ env.STRIMZI_REPO }}" strimzi

      - name: Update Strimzi Configuration
        run: |
          cd strimzi

          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"
          AUTOMQ_URL="${{ needs.prepare-release-info.outputs.automq_url }}"
          ORIGINAL_KAFKA_URL="${{ needs.prepare-release-info.outputs.original_kafka_url }}"

          echo "Using AutoMQ version: ${AUTOMQ_VERSION}"
          echo "Using Kafka version: ${KAFKA_VERSION}"
          echo "AutoMQ URL: ${AUTOMQ_URL}"

          # 获取AutoMQ checksum
          AUTOMQ_CHECKSUM=$(curl -L "$AUTOMQ_URL" | sha512sum | cut -d' ' -f1)
          ORIGINAL_CHECKSUM=$(grep -A 4 "version: ${KAFKA_VERSION}" kafka-versions.yaml | grep "checksum:" | awk '{print $2}')

          echo "AutoMQ checksum: ${AUTOMQ_CHECKSUM}"
          echo "Original checksum: ${ORIGINAL_CHECKSUM}"

          # 替换 kafka url 为 automq
          sed -i "s|${ORIGINAL_KAFKA_URL}|${AUTOMQ_URL}|" kafka-versions.yaml
          # 替换 checksum
          sed -i "s|${ORIGINAL_CHECKSUM}|${AUTOMQ_CHECKSUM}|" kafka-versions.yaml
          # 设置 3.9.0 为默认版本
          sed -i '/- version: 3\.9\.0/,/^- version:/ { /default: false/c\  default: true
          }' kafka-versions.yaml
          sed -i '/- version: 4\.0\.0/,$ { s/default: true/default: false/; }' kafka-versions.yaml

      - name: Prepare Build Environment
        run: |
          cd strimzi
          mvn clean install -DskipTests
          make -C docker-images/artifacts java_build

          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"

          # 重命名文件
          cd ./docker-images/artifacts/binaries/kafka/archives/
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz kafka_2.13-${KAFKA_VERSION}.tgz
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz.sha512 kafka_2.13-${KAFKA_VERSION}.tgz.sha512

          cd ..
          IGNORE_LIST="gson-2.9.0.jar
          gson-2.10.1.jar
          guava-32.0.1-jre.jar
          guava-32.1.3-jre.jar
          jackson-annotations-2.16.2.jar
          jackson-annotations-2.17.1.jar
          jackson-core-2.16.2.jar
          jackson-core-2.17.1.jar
          jackson-databind-2.16.2.jar
          jackson-databind-2.17.1.jar
          jackson-dataformat-yaml-2.16.2.jar
          jackson-dataformat-yaml-2.17.1.jar
          opentelemetry-api-1.32.0.jar
          opentelemetry-api-1.40.0.jar
          opentelemetry-exporter-common-1.34.1.jar
          opentelemetry-exporter-common-1.40.0.jar
          opentelemetry-exporter-otlp-common-1.34.1.jar
          opentelemetry-exporter-otlp-common-1.40.0.jar
          opentelemetry-exporter-otlp-1.34.1.jar
          opentelemetry-exporter-otlp-1.40.0.jar
          opentelemetry-instrumentation-api-1.32.0.jar
          opentelemetry-instrumentation-api-2.6.0.jar
          opentelemetry-sdk-common-1.34.1.jar
          opentelemetry-sdk-common-1.40.0.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.34.1.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.40.0.jar
          opentelemetry-sdk-logs-1.34.1.jar
          opentelemetry-sdk-logs-1.40.0.jar
          opentelemetry-sdk-metrics-1.34.1.jar
          opentelemetry-sdk-metrics-1.40.0.jar
          opentelemetry-sdk-trace-1.34.1.jar
          opentelemetry-sdk-trace-1.40.0.jar
          opentelemetry-semconv-1.21.0-alpha.jar
          opentelemetry-semconv-1.25.0-alpha.jar
          prometheus-metrics-config-1.3.1.jar
          prometheus-metrics-config-1.3.6.jar
          prometheus-metrics-exposition-formats-1.3.1.jar
          prometheus-metrics-exposition-textformats-1.3.6.jar
          prometheus-metrics-exporter-common-1.3.1.jar
          prometheus-metrics-exporter-common-1.3.6.jar
          prometheus-metrics-exporter-httpserver-1.3.1.jar
          prometheus-metrics-exporter-httpserver-1.3.6.jar
          prometheus-metrics-model-1.3.1.jar
          prometheus-metrics-model-1.3.6.jar"

          printf "%s\n" "$IGNORE_LIST" >> 3.9.0.ignorelist

      - name: Build Strimzi Image for ${{ matrix.arch }}
        run: |
          cd $GITHUB_WORKSPACE/strimzi

          # 设置构建平台
          export DOCKER_BUILDKIT=1
          export DOCKER_CLI_EXPERIMENTAL=enabled

          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export DOCKER_DEFAULT_PLATFORM=linux/arm64
          else
            export DOCKER_DEFAULT_PLATFORM=linux/amd64
          fi

          echo "🏗️ 构建 ${{ matrix.arch }} 架构镜像..."
          make MVN_ARGS='-DskipTests' docker_build

          echo "✅ ${{ matrix.arch }} 架构镜像构建完成"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}

      - name: Tag and Push Architecture-Specific Image
        run: |
          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"

          # release触发使用版本号
          IMAGE_TAG="${AUTOMQ_VERSION}-strimzi-kafka-${KAFKA_VERSION}-${{ matrix.arch }}"
          REPO_NAME="automq"
          ARCH_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${REPO_NAME}:${IMAGE_TAG}"

          docker tag strimzi/kafka:build-kafka-3.9.0 "${ARCH_TAG}"
          docker push "${ARCH_TAG}"

          DOCKER_ARCHITECTURE=arm64 make -C docker-images/base docker_build
          DOCKER_ARCHITECTURE=amd64 make -C docker-images/base docker_build

          DOCKER_ARCHITECTURE=arm64 make -C docker-images/kafka-based docker_build docker_tag docker_push
          DOCKER_ARCHITECTURE=amd64 make -C docker-images/kafka-based docker_build docker_tag docker_push

          DOCKER_ARCHITECTURE=arm64 make -C docker-images/kafka-based docker_amend_manifest
          DOCKER_ARCHITECTURE=amd64 make -C docker-images/kafka-based docker_amend_manifest

          make -C docker-images/kafka-based docker_push_manifest

          echo "✅ 推送完成 ${{ matrix.arch }} 架构镜像: ${ARCH_TAG}"
