name: Docker Strimzi Multi-Arch Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'AutoMQ version tag'
        required: true
        type: string
  workflow_run:
    workflows: ["GitHub Release"]
    types:
      - completed
  push:
    branches: [ "dev" ]

env:
  KAFKA_VERSION: "3.9.0"
  STRIMZI_REPO: "https://github.com/AutoMQ/strimzi-kafka-operator.git"
  STRIMZI_BRANCH: "main"

jobs:
  prepare-release-info:
    name: Prepare Release Information
    runs-on: ubuntu-24.04
    # 只有当GitHub Release workflow成功完成时才执行，或者手动触发时执行，或者push到dev分支时执行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    outputs:
      automq_version: ${{ steps.get-version.outputs.automq_version }}
      automq_url: ${{ steps.get-version.outputs.automq_url }}
      original_kafka_url: ${{ steps.get-version.outputs.original_kafka_url }}
    steps:
      - name: Get and validate release information
        id: get-version
        run: |
          # 获取tag
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
            echo "Using manual input tag: ${TAG}"
            
            # 验证tag格式
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+|-alpha[0-9]+|-beta[0-9]+)?$ ]]; then
              echo "❌ Invalid tag format: ${TAG}"
              exit 1
            fi
            
            # 构建URL
            AUTOMQ_URL="https://github.com/Rancho-7/automq/releases/download/${TAG}/automq-${TAG}_kafka-${KAFKA_VERSION}.tgz"
            
            # 验证release存在性
            echo "Checking release URL: ${AUTOMQ_URL}"
            if curl --head --silent --fail "${AUTOMQ_URL}" > /dev/null 2>&1; then
              echo "✅ Confirmed release exists: ${AUTOMQ_URL}"
            else
              echo "❌ Release not found: ${AUTOMQ_URL}"
              echo "Please wait for GitHub Release workflow to complete or check if the release exists."
              exit 1
            fi
            
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            TAG="${{ github.event.workflow_run.head_branch }}"
            echo "Using tag from workflow_run: ${TAG}"
            
            # 验证tag格式
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+|-alpha[0-9]+|-beta[0-9]+)?$ ]]; then
              echo "❌ Invalid tag format: ${TAG}"
              exit 1
            fi
            
            # 构建URL
            AUTOMQ_URL="https://github.com/Rancho-7/automq/releases/download/${TAG}/automq-${TAG}_kafka-${KAFKA_VERSION}.tgz"
            
            # 验证release存在性
            echo "Checking release URL: ${AUTOMQ_URL}"
            if curl --head --silent --fail "${AUTOMQ_URL}" > /dev/null 2>&1; then
              echo "✅ Confirmed release exists: ${AUTOMQ_URL}"
            else
              echo "❌ Release not found: ${AUTOMQ_URL}"
              echo "Please wait for GitHub Release workflow to complete or check if the release exists."
              exit 1
            fi
            
          else
            # push到dev分支时使用固定版本进行测试
            TAG="1.5.3"
            AUTOMQ_URL="https://github.com/AutoMQ/automq/releases/download/${TAG}/automq-${TAG}_kafka-${KAFKA_VERSION}.tgz"
            echo "Using dev branch with fixed tag: ${TAG}"
          fi
          
          ORIGINAL_KAFKA_URL="https://archive\.apache\.org/dist/kafka/${KAFKA_VERSION}/kafka_2\.13-${KAFKA_VERSION}\.tgz"
          
          # 设置输出
          echo "automq_version=${TAG}" >> $GITHUB_OUTPUT
          echo "automq_url=${AUTOMQ_URL}" >> $GITHUB_OUTPUT
          echo "original_kafka_url=${ORIGINAL_KAFKA_URL}" >> $GITHUB_OUTPUT

  strimzi-multiarch:
    name: Build Strimzi Image (${{ matrix.arch }})
    needs: prepare-release-info
    strategy:
      matrix:
        include:
          - platform: ubuntu-24.04
            arch: amd64
            docker_platform: linux/amd64
            jdk: "17"
          - platform: ubuntu-24.04  
            arch: arm64
            docker_platform: linux/arm64
            jdk: "17"
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: "zulu"

      - name: Set up QEMU (for ARM64)
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone Strimzi Repository
        run: |
          git clone --depth 1 --branch "${{ env.STRIMZI_BRANCH }}" "${{ env.STRIMZI_REPO }}" strimzi

      - name: Update Strimzi Configuration
        run: |
          cd strimzi
          
          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"
          AUTOMQ_URL="${{ needs.prepare-release-info.outputs.automq_url }}"
          ORIGINAL_KAFKA_URL="${{ needs.prepare-release-info.outputs.original_kafka_url }}"
          
          echo "Using AutoMQ version: ${AUTOMQ_VERSION}"
          echo "Using Kafka version: ${KAFKA_VERSION}"
          echo "AutoMQ URL: ${AUTOMQ_URL}"
          
          # 获取AutoMQ checksum
          AUTOMQ_CHECKSUM=$(curl -L "$AUTOMQ_URL" | sha512sum | cut -d' ' -f1)
          ORIGINAL_CHECKSUM=$(grep -A 4 "version: ${KAFKA_VERSION}" kafka-versions.yaml | grep "checksum:" | awk '{print $2}')
          
          echo "AutoMQ checksum: ${AUTOMQ_CHECKSUM}"
          echo "Original checksum: ${ORIGINAL_CHECKSUM}"
          
          # 替换 kafka url 为 automq
          sed -i "s|${ORIGINAL_KAFKA_URL}|${AUTOMQ_URL}|" kafka-versions.yaml
          # 替换 checksum
          sed -i "s|${ORIGINAL_CHECKSUM}|${AUTOMQ_CHECKSUM}|" kafka-versions.yaml
          # 设置 3.9.0 为默认版本
          sed -i '/- version: 3\.9\.0/,/^- version:/ { /default: false/c\  default: true
          }' kafka-versions.yaml
          sed -i '/- version: 4\.0\.0/,$ { s/default: true/default: false/; }' kafka-versions.yaml

      - name: Prepare Build Environment  
        run: |
          cd strimzi
          mvn clean install -DskipTests
          make -C docker-images/artifacts java_build

          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"
          
          # 重命名文件
          cd ./docker-images/artifacts/binaries/kafka/archives/
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz kafka_2.13-${KAFKA_VERSION}.tgz
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz.sha512 kafka_2.13-${KAFKA_VERSION}.tgz.sha512 

          cd ..
          IGNORE_LIST="gson-2.9.0.jar
          gson-2.10.1.jar
          guava-32.0.1-jre.jar
          guava-32.1.3-jre.jar
          jackson-annotations-2.16.2.jar
          jackson-annotations-2.17.1.jar
          jackson-core-2.16.2.jar
          jackson-core-2.17.1.jar
          jackson-databind-2.16.2.jar
          jackson-databind-2.17.1.jar
          jackson-dataformat-yaml-2.16.2.jar
          jackson-dataformat-yaml-2.17.1.jar
          opentelemetry-api-1.32.0.jar
          opentelemetry-api-1.40.0.jar
          opentelemetry-exporter-common-1.34.1.jar
          opentelemetry-exporter-common-1.40.0.jar
          opentelemetry-exporter-otlp-common-1.34.1.jar
          opentelemetry-exporter-otlp-common-1.40.0.jar
          opentelemetry-exporter-otlp-1.34.1.jar
          opentelemetry-exporter-otlp-1.40.0.jar
          opentelemetry-instrumentation-api-1.32.0.jar
          opentelemetry-instrumentation-api-2.6.0.jar
          opentelemetry-sdk-common-1.34.1.jar
          opentelemetry-sdk-common-1.40.0.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.34.1.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.40.0.jar
          opentelemetry-sdk-logs-1.34.1.jar
          opentelemetry-sdk-logs-1.40.0.jar
          opentelemetry-sdk-metrics-1.34.1.jar
          opentelemetry-sdk-metrics-1.40.0.jar
          opentelemetry-sdk-trace-1.34.1.jar
          opentelemetry-sdk-trace-1.40.0.jar
          opentelemetry-semconv-1.21.0-alpha.jar
          opentelemetry-semconv-1.25.0-alpha.jar
          prometheus-metrics-config-1.3.1.jar
          prometheus-metrics-config-1.3.6.jar
          prometheus-metrics-exposition-formats-1.3.1.jar
          prometheus-metrics-exposition-textformats-1.3.6.jar
          prometheus-metrics-exporter-common-1.3.1.jar
          prometheus-metrics-exporter-common-1.3.6.jar
          prometheus-metrics-exporter-httpserver-1.3.1.jar
          prometheus-metrics-exporter-httpserver-1.3.6.jar
          prometheus-metrics-model-1.3.1.jar
          prometheus-metrics-model-1.3.6.jar"
          
          printf "%s\n" "$IGNORE_LIST" >> 3.9.0.ignorelist

      - name: Build Strimzi Image for ${{ matrix.arch }}
        run: |
          cd $GITHUB_WORKSPACE/strimzi
          
          # 设置构建平台
          export DOCKER_BUILDKIT=1
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export DOCKER_DEFAULT_PLATFORM=linux/arm64
          else
            export DOCKER_DEFAULT_PLATFORM=linux/amd64
          fi
          
          echo "🏗️ 构建 ${{ matrix.arch }} 架构镜像..."
          make MVN_ARGS='-DskipTests' docker_build
          
          echo "✅ ${{ matrix.arch }} 架构镜像构建完成"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}

      - name: Tag and Push Architecture-Specific Image
        run: |
          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"
          
          # 根据触发方式生成不同的镜像标签
          if [ "${{ github.event_name }}" == "push" ]; then
            # dev分支推送使用分支名
            IMAGE_TAG="${{ github.ref_name }}-strimzi-${{ matrix.arch }}"
            REPO_NAME="automq"
          else
            # release触发使用版本号
            IMAGE_TAG="${AUTOMQ_VERSION}-strimzi-kafka-${KAFKA_VERSION}-${{ matrix.arch }}"
            REPO_NAME="automq-test"
          fi
          
          ARCH_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${REPO_NAME}:${IMAGE_TAG}"
          
          echo "🏷️ 标记镜像: ${ARCH_TAG}"
          docker tag strimzi/kafka:build-kafka-3.9.0 "${ARCH_TAG}"
          
          echo "⬆️ 推送镜像: ${ARCH_TAG}"
          docker push "${ARCH_TAG}"
          
          echo "✅ 推送完成 ${{ matrix.arch }} 架构镜像: ${ARCH_TAG}"

  create-manifest:
    name: Create Multi-Arch Manifest
    needs: [prepare-release-info, strimzi-multiarch]
    runs-on: ubuntu-24.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          AUTOMQ_VERSION="${{ needs.prepare-release-info.outputs.automq_version }}"
          
          # 根据触发方式生成不同的镜像标签
          if [ "${{ github.event_name }}" == "push" ]; then
            # dev分支推送使用分支名
            BASE_TAG="${{ github.ref_name }}-strimzi"
            AMD64_TAG="${{ github.ref_name }}-strimzi-amd64"
            ARM64_TAG="${{ github.ref_name }}-strimzi-arm64"
            REPO_NAME="automq"
          else
            # release触发使用版本号
            BASE_TAG="${AUTOMQ_VERSION}-strimzi-kafka-${KAFKA_VERSION}"
            AMD64_TAG="${AUTOMQ_VERSION}-strimzi-kafka-${KAFKA_VERSION}-amd64"
            ARM64_TAG="${AUTOMQ_VERSION}-strimzi-kafka-${KAFKA_VERSION}-arm64"
            REPO_NAME="automq-test"
          fi
          
          BASE_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${REPO_NAME}:${BASE_TAG}"
          AMD64_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${REPO_NAME}:${AMD64_TAG}"
          ARM64_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${REPO_NAME}:${ARM64_TAG}"
          
          echo "🔨 创建多架构 manifest..."
          echo "📦 基础镜像: ${BASE_IMAGE}"
          echo "🖥️  AMD64镜像: ${AMD64_IMAGE}" 
          echo "📱 ARM64镜像: ${ARM64_IMAGE}"
          
          # 验证镜像是否存在
          echo "🔍 验证镜像是否存在..."
          if docker manifest inspect ${AMD64_IMAGE} > /dev/null 2>&1; then
            echo "✅ AMD64镜像存在"
          else
            echo "❌ AMD64镜像不存在"
            exit 1
          fi
          
          if docker manifest inspect ${ARM64_IMAGE} > /dev/null 2>&1; then
            echo "✅ ARM64镜像存在"
          else
            echo "❌ ARM64镜像不存在"
            exit 1
          fi
          
          # 创建 manifest
          echo "🔗 创建manifest..."
          docker manifest create ${BASE_IMAGE} \
            --amend ${AMD64_IMAGE} \
            --amend ${ARM64_IMAGE}
          
          # 推送 manifest  
          echo "⬆️ 推送manifest..."
          docker manifest push ${BASE_IMAGE}
          
          echo "✅ 多架构镜像创建完成!"
          echo "🏷️ 镜像标签: ${BASE_IMAGE}"
          echo "🏗️ 支持架构: linux/amd64, linux/arm64"
          echo "📖 使用方式: docker pull ${BASE_IMAGE}"