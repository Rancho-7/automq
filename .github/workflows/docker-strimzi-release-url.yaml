name: Docker Strimzi Release

on:
   workflow_dispatch:
#     inputs:
#       tag:
#         description: 'AutoMQ version tag'
#         required: true
#         type: string
   workflow_run:
     workflows: ["GitHub Release"]
     types:
       - completed

env:
  KAFKA_VERSION: "3.9.0"
  STRIMZI_REPO: "https://github.com/AutoMQ/strimzi-kafka-operator.git"
  STRIMZI_BRANCH: "main"

jobs:
  strimzi-release:
    name: Strimzi Image Release
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        platform: [ "ubuntu-24.04" ]
        jdk: ["17"]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get and validate release information
        run: |
          # 获取tag
          TAG="${{ github.event.workflow_run.head_branch }}"
          echo "Using tag from workflow_run: ${TAG}"

          # 构建URL并设置环境变量
          AUTOMQ_URL="https://github.com/Rancho-7/automq/releases/download/${TAG}/automq-${TAG}_kafka-${KAFKA_VERSION}.tgz"
          ORIGINAL_KAFKA_URL="https://archive\.apache\.org/dist/kafka/${KAFKA_VERSION}/kafka_2\.13-${KAFKA_VERSION}\.tgz"

          {
            echo "AUTOMQ_VERSION=${TAG}"
            echo "AUTOMQ_URL=${AUTOMQ_URL}"
            echo "ORIGINAL_KAFKA_URL=${ORIGINAL_KAFKA_URL}"
          } >> $GITHUB_ENV

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: "zulu"

      - name: Clone Strimzi Repository
        run: |
          git clone --depth 1 --branch "${{ env.STRIMZI_BRANCH }}" "${{ env.STRIMZI_REPO }}" strimzi

      - name: Update Strimzi Configuration
        run: |
          cd strimzi

          echo "Using AutoMQ version: ${AUTOMQ_VERSION}"
          echo "Using Kafka version: ${KAFKA_VERSION}"
          echo "AutoMQ URL: ${AUTOMQ_URL}"

          # 获取AutoMQ checksum
          AUTOMQ_CHECKSUM=$(curl -L "$AUTOMQ_URL" | sha512sum | cut -d' ' -f1)
          ORIGINAL_CHECKSUM=$(grep -A 4 "version: ${KAFKA_VERSION}" kafka-versions.yaml | grep "checksum:" | awk '{print $2}')

          echo "AutoMQ checksum: ${AUTOMQ_CHECKSUM}"
          echo "Original checksum: ${ORIGINAL_CHECKSUM}"

          # 替换 kafka url 为 automq
          sed -i "s|${ORIGINAL_KAFKA_URL}|${AUTOMQ_URL}|" kafka-versions.yaml
          # 替换 checksum
          sed -i "s|${ORIGINAL_CHECKSUM}|${AUTOMQ_CHECKSUM}|" kafka-versions.yaml
          # 设置 3.9.0 为默认版本
          sed -i '/- version: 3\.9\.0/,/^- version:/ { /default: false/c\  default: true
          }' kafka-versions.yaml
          sed -i '/- version: 4\.0\.0/,$ { s/default: true/default: false/; }' kafka-versions.yaml

          # 将3.9.1版本的supported字段设置为false
          sed -i '/- version: 3\.9\.1/,/^- version:/ { s/supported: true/supported: false/; }' kafka-versions.yaml
          # 将4.0.0版本的supported字段设置为false
          sed -i '/- version: 4\.0\.0/,$ { s/supported: true/supported: false/; }' kafka-versions.yaml

      - name: Prepare Strimzi Image Environment
        run: |
          cd strimzi
          mvn clean install -DskipTests
          make -C docker-images/artifacts java_build

          cd ./docker-images/artifacts/binaries/kafka/archives/
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz kafka_2.13-${KAFKA_VERSION}.tgz
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz.sha512 kafka_2.13-${KAFKA_VERSION}.tgz.sha512
          cd ..

          IGNORE_LIST="gson-2.9.0.jar
          gson-2.10.1.jar
          guava-32.0.1-jre.jar
          guava-32.1.3-jre.jar
          jackson-annotations-2.16.2.jar
          jackson-annotations-2.17.1.jar
          jackson-core-2.16.2.jar
          jackson-core-2.17.1.jar
          jackson-databind-2.16.2.jar
          jackson-databind-2.17.1.jar
          jackson-dataformat-yaml-2.16.2.jar
          jackson-dataformat-yaml-2.17.1.jar
          opentelemetry-api-1.32.0.jar
          opentelemetry-api-1.40.0.jar
          opentelemetry-exporter-common-1.34.1.jar
          opentelemetry-exporter-common-1.40.0.jar
          opentelemetry-exporter-otlp-common-1.34.1.jar
          opentelemetry-exporter-otlp-common-1.40.0.jar
          opentelemetry-exporter-otlp-1.34.1.jar
          opentelemetry-exporter-otlp-1.40.0.jar
          opentelemetry-instrumentation-api-1.32.0.jar
          opentelemetry-instrumentation-api-2.6.0.jar
          opentelemetry-sdk-common-1.34.1.jar
          opentelemetry-sdk-common-1.40.0.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.34.1.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.40.0.jar
          opentelemetry-sdk-logs-1.34.1.jar
          opentelemetry-sdk-logs-1.40.0.jar
          opentelemetry-sdk-metrics-1.34.1.jar
          opentelemetry-sdk-metrics-1.40.0.jar
          opentelemetry-sdk-trace-1.34.1.jar
          opentelemetry-sdk-trace-1.40.0.jar
          opentelemetry-semconv-1.21.0-alpha.jar
          opentelemetry-semconv-1.25.0-alpha.jar
          prometheus-metrics-config-1.3.1.jar
          prometheus-metrics-config-1.3.6.jar
          prometheus-metrics-exposition-formats-1.3.1.jar
          prometheus-metrics-exposition-textformats-1.3.6.jar
          prometheus-metrics-exporter-common-1.3.1.jar
          prometheus-metrics-exporter-common-1.3.6.jar
          prometheus-metrics-exporter-httpserver-1.3.1.jar
          prometheus-metrics-exporter-httpserver-1.3.6.jar
          prometheus-metrics-model-1.3.1.jar
          prometheus-metrics-model-1.3.6.jar"

          printf "%s\n" "$IGNORE_LIST" >> 3.9.0.ignorelist

      - name: Build Strimzi Docker Images
        run: |
          cd $GITHUB_WORKSPACE/strimzi
          make MVN_ARGS='-DskipTests' docker_build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}

      - name: Push AutoMQ Strimzi Image
        env:
          DOCKER_ORG: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_TAG: "${{ github.ref_name }}-strimziA"
        run: |
          cd $GITHUB_WORKSPACE/strimzi

          make -C docker-images/kafka-based docker_delete_manifest || true

          # 构建base镜像
          # 构建、标记、推送各架构的kafka镜像
          DOCKER_ARCHITECTURE=arm64 make -C docker-images/base docker_build
          DOCKER_ARCHITECTURE=arm64 make -C docker-images/kafka-based docker_build docker_tag docker_push

          DOCKER_ARCHITECTURE=amd64 make -C docker-images/base docker_build
          DOCKER_ARCHITECTURE=amd64 make -C docker-images/kafka-based docker_build docker_tag docker_push

          # 创建和推送 manifest
          DOCKER_ARCHITECTURE=arm64 make -C docker-images/kafka-based docker_amend_manifest
          DOCKER_ARCHITECTURE=amd64 make -C docker-images/kafka-based docker_amend_manifest

          make -C docker-images/kafka-based docker_push_manifest
