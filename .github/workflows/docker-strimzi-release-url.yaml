name: Docker Strimzi Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'AutoMQ version tag'
        required: true
        type: string
  workflow_run:
    workflows: ["GitHub Release"]
    types:
      - completed

jobs:
  strimzi-release:
    name: Strimzi Image Release
    # 只有当GitHub Release workflow成功完成时才执行，或者手动触发时执行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        platform: [ "ubuntu-24.04" ]
        jdk: ["17"]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release information
        id: release_info
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
            echo "Using manual input tag: ${TAG}"
          else
            # 从triggering workflow获取tag信息
            TAG="${{ github.event.workflow_run.head_branch }}"
            echo "Using tag from workflow_run: ${TAG}"
          fi
          
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          # 验证tag格式
          if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+|-alpha[0-9]+|-beta[0-9]+)?$ ]]; then
            echo "❌ Invalid tag format: ${TAG}"
            exit 1
          fi
          
          KAFKA_VERSION="3.9.0"
          echo "kafka_version=${KAFKA_VERSION}" >> $GITHUB_OUTPUT
          
          RELEASE_URL="https://github.com/Rancho-7/automq/releases/download/${TAG}/automq-${TAG}_kafka-${KAFKA_VERSION}.tgz"
          echo "Checking release URL: ${RELEASE_URL}"
          
          if curl --head --silent --fail "${RELEASE_URL}" > /dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Confirmed release exists: ${RELEASE_URL}"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Release not found: ${RELEASE_URL}"
            echo "Please wait for GitHub Release workflow to complete or check if the release exists."
            exit 1
          fi

      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: "zulu"

      - name: Clone Strimzi Repository
        run: |
          STRIMZI_REPO="https://github.com/AutoMQ/strimzi-kafka-operator.git"
          STRIMZI_BRANCH="main"
          
          git clone --depth 1 --branch "$STRIMZI_BRANCH" "$STRIMZI_REPO" strimzi
      - name: Update Strimzi Configuration
        run: |
          cd strimzi
          
          AUTOMQ_VERSION="${{ steps.release_info.outputs.tag }}"
          KAFKA_VERSION="${{ steps.release_info.outputs.kafka_version }}"
          AUTOMQ_URL="https://github.com/AutoMQ/automq/releases/download/${AUTOMQ_VERSION}/automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz"
          ORIGINAL_KAFKA_URL="https://archive\.apache\.org/dist/kafka/${KAFKA_VERSION}/kafka_2\.13-${KAFKA_VERSION}\.tgz"
          
          echo "Using AutoMQ version: ${AUTOMQ_VERSION}"
          echo "Using Kafka version: ${KAFKA_VERSION}"
          echo "AutoMQ URL: ${AUTOMQ_URL}"
          
          AUTOMQ_CHECKSUM=$(curl -L "$AUTOMQ_URL" | sha512sum | cut -d' ' -f1)
          ORIGINAL_CHECKSUM=$(grep -A 4 "version: ${KAFKA_VERSION}" kafka-versions.yaml | grep "checksum:" | awk '{print $2}')
          
          echo "AutoMQ checksum: ${AUTOMQ_CHECKSUM}"
          echo "Original checksum: ${ORIGINAL_CHECKSUM}"
          
          # replace kafka url to automq
          sed -i "s|${ORIGINAL_KAFKA_URL}|${AUTOMQ_URL}|" kafka-versions.yaml
          # replace checksum
          sed -i "s|${ORIGINAL_CHECKSUM}|${AUTOMQ_CHECKSUM}|" kafka-versions.yaml
          # set 3.9.0 to default
          sed -i '/- version: 3\.9\.0/,/^- version:/ { /default: false/c\  default: true
          }' kafka-versions.yaml
          sed -i '/- version: 4\.0\.0/,$ { s/default: true/default: false/; }' kafka-versions.yaml
      - name: Prepare Strimzi Image Environment
        run: |
          cd strimzi
          mvn clean install -DskipTests
          make -C docker-images/artifacts java_build
          cd ./docker-images/artifacts/binaries/kafka/archives/
          AUTOMQ_VERSION="${{ steps.release_info.outputs.tag }}"
          KAFKA_VERSION="${{ steps.release_info.outputs.kafka_version }}"
          
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz kafka_2.13-3.9.0.tgz
          mv automq-${AUTOMQ_VERSION}_kafka-${KAFKA_VERSION}.tgz.sha512 kafka_2.13-3.9.0.tgz.sha512 
          cd ..
          
          IGNORE_LIST="gson-2.9.0.jar
          gson-2.10.1.jar
          guava-32.0.1-jre.jar
          guava-32.1.3-jre.jar
          jackson-annotations-2.16.2.jar
          jackson-annotations-2.17.1.jar
          jackson-core-2.16.2.jar
          jackson-core-2.17.1.jar
          jackson-databind-2.16.2.jar
          jackson-databind-2.17.1.jar
          jackson-dataformat-yaml-2.16.2.jar
          jackson-dataformat-yaml-2.17.1.jar
          opentelemetry-api-1.32.0.jar
          opentelemetry-api-1.40.0.jar
          opentelemetry-exporter-common-1.34.1.jar
          opentelemetry-exporter-common-1.40.0.jar
          opentelemetry-exporter-otlp-common-1.34.1.jar
          opentelemetry-exporter-otlp-common-1.40.0.jar
          opentelemetry-exporter-otlp-1.34.1.jar
          opentelemetry-exporter-otlp-1.40.0.jar
          opentelemetry-instrumentation-api-1.32.0.jar
          opentelemetry-instrumentation-api-2.6.0.jar
          opentelemetry-sdk-common-1.34.1.jar
          opentelemetry-sdk-common-1.40.0.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.34.1.jar
          opentelemetry-sdk-extension-autoconfigure-spi-1.40.0.jar
          opentelemetry-sdk-logs-1.34.1.jar
          opentelemetry-sdk-logs-1.40.0.jar
          opentelemetry-sdk-metrics-1.34.1.jar
          opentelemetry-sdk-metrics-1.40.0.jar
          opentelemetry-sdk-trace-1.34.1.jar
          opentelemetry-sdk-trace-1.40.0.jar
          opentelemetry-semconv-1.21.0-alpha.jar
          opentelemetry-semconv-1.25.0-alpha.jar
          prometheus-metrics-config-1.3.1.jar
          prometheus-metrics-config-1.3.6.jar
          prometheus-metrics-exposition-formats-1.3.1.jar
          prometheus-metrics-exposition-textformats-1.3.6.jar
          prometheus-metrics-exporter-common-1.3.1.jar
          prometheus-metrics-exporter-common-1.3.6.jar
          prometheus-metrics-exporter-httpserver-1.3.1.jar
          prometheus-metrics-exporter-httpserver-1.3.6.jar
          prometheus-metrics-model-1.3.1.jar
          prometheus-metrics-model-1.3.6.jar"
          
          printf "%s\n" "$IGNORE_LIST" >> 3.9.0.ignorelist
      - name: Build Strimzi Docker Images
        run: |
          cd $GITHUB_WORKSPACE/strimzi
          make MVN_ARGS='-DskipTests' docker_build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}

      - name: Determine Image Tags
        id: image_tags
        run: |
          AUTOMQ_VERSION="${{ steps.release_info.outputs.tag }}"
          KAFKA_VERSION="${{ steps.release_info.outputs.kafka_version }}"
          IMAGE_TAG="${AUTOMQ_VERSION}-strimzi-kafka-${KAFKA_VERSION}"
          
          echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/automq-test:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${IMAGE_TAG}"
      - name: Push AutoMQ Strimzi Image
        run: |
          docker tag strimzi/kafka:build-kafka-3.9.0 ${{ steps.image_tags.outputs.tags }}
          docker push ${{ steps.image_tags.outputs.tags }}